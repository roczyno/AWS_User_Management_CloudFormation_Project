AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to create IAM resources, store credentials in Secrets Manager and Parameter Store, and set up EventBridge with Lambda for user notifications.

Resources:
  # Store user emails in Parameter Store (Hardcoded)
  User1EmailParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/user1/email"
      Type: "String"
      Value: "user1@example.com" # Hardcoded User 1 email

  User2EmailParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/user2/email"
      Type: "String"
      Value: "user2@example.com" # Hardcoded User 2 email

  User3EmailParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/user3/email"
      Type: "String"
      Value: "user3@example.com" # Hardcoded User 3 email

  User4EmailParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/user4/email"
      Type: "String"
      Value: "user4@example.com" # Hardcoded User 4 email

  User5EmailParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/user5/email"
      Type: "String"
      Value: "user5@example.com" # Hardcoded User 5 email

  User6EmailParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/user6/email"
      Type: "String"
      Value: "user6@example.com" # Hardcoded User 6 email

  User7EmailParameter: # New User 7 Email Parameter
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/user7/email"
      Type: "String"
      Value: "user7@example.com" # Hardcoded User 7 email

  # Generate one-time passwords in Secrets Manager
  User1Password:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: "User1Password"
      GenerateSecretString:
        SecretStringTemplate: "{}"
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'

  User2Password:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: "User2Password"
      GenerateSecretString:
        SecretStringTemplate: "{}"
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'

  User3Password:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: "User3Password"
      GenerateSecretString:
        SecretStringTemplate: "{}"
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'

  User4Password:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: "User4Password"
      GenerateSecretString:
        SecretStringTemplate: "{}"
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'

  User5Password:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: "User5Password"
      GenerateSecretString:
        SecretStringTemplate: "{}"
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'

  User6Password:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: "User6Password"
      GenerateSecretString:
        SecretStringTemplate: "{}"
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'

  User7Password: # New User 7 Password Secret
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: "User7Password"
      GenerateSecretString:
        SecretStringTemplate: "{}"
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'

  # IAM Groups
  S3ReadOnlyGroup:
    Type: "AWS::IAM::Group"
    Properties:
      GroupName: "S3ReadOnlyGroup"
      Policies:
        - PolicyName: "S3ReadOnlyPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "s3:GetObject"
                Resource: "*"

  EC2S3ReadOnlyGroup:
    Type: "AWS::IAM::Group"
    Properties:
      GroupName: "EC2S3ReadOnlyGroup"
      Policies:
        - PolicyName: "EC2S3ReadOnlyPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource: "*"

  # IAM Users
  User1:
    Type: "AWS::IAM::User"
    Properties:
      UserName: "User1"
      Groups:
        - !Ref S3ReadOnlyGroup
      LoginProfile:
        Password: !Join
          - ""
          - - "{{resolve:secretsmanager:"
            - !Ref User1Password
            - ":SecretString:password}}"
        PasswordResetRequired: true

  User2:
    Type: "AWS::IAM::User"
    Properties:
      UserName: "User2"
      Groups:
        - !Ref EC2S3ReadOnlyGroup
      LoginProfile:
        Password: !Join
          - ""
          - - "{{resolve:secretsmanager:"
            - !Ref User2Password
            - ":SecretString:password}}"
        PasswordResetRequired: true

  User3:
    Type: "AWS::IAM::User"
    Properties:
      UserName: "User3"
      Groups:
        - !Ref EC2S3ReadOnlyGroup
      LoginProfile:
        Password: !Join
          - ""
          - - "{{resolve:secretsmanager:"
            - !Ref User3Password
            - ":SecretString:password}}"
        PasswordResetRequired: true

  User4:
    Type: "AWS::IAM::User"
    Properties:
      UserName: "User4"
      Groups:
        - !Ref S3ReadOnlyGroup # Assigning User4 to S3ReadOnlyGroup
      LoginProfile:
        Password: !Join
          - ""
          - - "{{resolve:secretsmanager:"
            - !Ref User4Password
            - ":SecretString:password}}"
        PasswordResetRequired: true

  User5:
    Type: "AWS::IAM::User"
    Properties:
      UserName: "User5"
      Groups:
        - !Ref S3ReadOnlyGroup # Assigning User5 to S3ReadOnlyGroup
      LoginProfile:
        Password: !Join
          - ""
          - - "{{resolve:secretsmanager:"
            - !Ref User5Password
            - ":SecretString:password}}"
        PasswordResetRequired: true

  User6:
    Type: "AWS::IAM::User"
    Properties:
      UserName: "User6"
      Groups:
        - !Ref EC2S3ReadOnlyGroup # Assigning User6 to EC2S3ReadOnlyGroup
      LoginProfile:
        Password: !Join
          - ""
          - - "{{resolve:secretsmanager:"
            - !Ref User6Password
            - ":SecretString:password}}"
        PasswordResetRequired: true

  User7: # New User 7
    Type: "AWS::IAM::User"
    Properties:
      UserName: "User7"
      Groups:
        - !Ref S3ReadOnlyGroup # Assigning User7 to S3ReadOnlyGroup
      LoginProfile:
        Password: !Join
          - ""
          - - "{{resolve:secretsmanager:"
            - !Ref User7Password
            - ":SecretString:password}}"
        PasswordResetRequired: true

  # IAM Role for Lambda Execution
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "LambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameter"
                  - "secretsmanager:GetSecretValue"
                  - "logs:CreateLogGroup" # Allow creating log groups
                  - "logs:CreateLogStream" # Allow creating log streams
                  - "logs:PutLogEvents" # Allow putting log events
                Resource: "*"

  # Lambda Function to handle EventBridge events
  UserNotificationLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: "python3.9"
      Code:
        ZipFile: |
          import boto3
          import os

          def handler(event, context):
              secretsmanager = boto3.client('secretsmanager')
              ssm = boto3.client('ssm')

              # Retrieve user emails
              user1_email = ssm.get_parameter(Name='/user1/email')['Parameter']['Value']
              user2_email = ssm.get_parameter(Name='/user2/email')['Parameter']['Value']
              user3_email = ssm.get_parameter(Name='/user3/email')['Parameter']['Value']
              user4_email = ssm.get_parameter(Name='/user4/email')['Parameter']['Value']
              user5_email = ssm.get_parameter(Name='/user5/email')['Parameter']['Value']
              user6_email = ssm.get_parameter(Name='/user6/email')['Parameter']['Value']
              user7_email = ssm.get_parameter(Name='/user7/email')['Parameter']['Value']  # New User 7 Email

              # Retrieve passwords from Secrets Manager
              user1_password = secretsmanager.get_secret_value(SecretId='User1Password')['SecretString']
              user2_password = secretsmanager.get_secret_value(SecretId='User2Password')['SecretString']
              user3_password = secretsmanager.get_secret_value(SecretId='User3Password')['SecretString']
              user4_password = secretsmanager.get_secret_value(SecretId='User4Password')['SecretString']
              user5_password = secretsmanager.get_secret_value(SecretId='User5Password')['SecretString']
              user6_password = secretsmanager.get_secret_value(SecretId='User6Password')['SecretString']
              user7_password = secretsmanager.get_secret_value(SecretId='User7Password')['SecretString']  # New User 7 Password

              # Log the information (you can send emails or perform other actions as needed)
              print(f'User1 Email: {user1_email}, Password: {user1_password}')
              print(f'User2 Email: {user2_email}, Password: {user2_password}')
              print(f'User3 Email: {user3_email}, Password: {user3_password}')
              print(f'User4 Email: {user4_email}, Password: {user4_password}')
              print(f'User5 Email: {user5_email}, Password: {user5_password}')
              print(f'User6 Email: {user6_email}, Password: {user6_password}')
              print(f'User7 Email: {user7_email}, Password: {user7_password}')  # Log User 7 info

  # EventBridge Rule to trigger Lambda function
  UserNotificationRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: "UserNotificationRule"
      ScheduleExpression: "rate(1 hour)" # Change as needed
      Targets:
        - Arn: !GetAtt UserNotificationLambda.Arn
          Id: "UserNotificationLambdaTarget"

  # Permission for EventBridge to invoke Lambda
  EventBridgeInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref UserNotificationLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt UserNotificationRule.Arn

Outputs:
  LambdaFunctionArn:
    Description: "ARN of the Lambda function"
    Value: !GetAtt UserNotificationLambda.Arn
