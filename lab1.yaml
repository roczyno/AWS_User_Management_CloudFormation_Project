AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to create IAM resources, store credentials in Secrets Manager and Parameter Store, and set up EventBridge with Lambda for user notifications.

Resources:
  # Store user emails in Parameter Store (Hardcoded)
  User1EmailParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/user1/email"
      Type: "String"
      Value: "user1@example.com" 

  User2EmailParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/user2/email"
      Type: "String"
      Value: "user2@example.com" 

  User3EmailParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/user3/email"
      Type: "String"
      Value: "user3@example.com" 

  # Generate one-time passwords in Secrets Manager
  User1Password:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: "User1Password"
      GenerateSecretString:
        SecretStringTemplate: "{}"
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'

  User2Password:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: "User2Password"
      GenerateSecretString:
        SecretStringTemplate: "{}"
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'

  User3Password:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: "User3Password"
      GenerateSecretString:
        SecretStringTemplate: "{}"
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'

  # IAM Groups
  S3ReadOnlyGroup:
    Type: "AWS::IAM::Group"
    Properties:
      GroupName: "S3ReadOnlyGroup"
      Policies:
        - PolicyName: "S3ReadOnlyPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "s3:GetObject"
                Resource: "*"

  EC2S3ReadOnlyGroup:
    Type: "AWS::IAM::Group"
    Properties:
      GroupName: "EC2S3ReadOnlyGroup"
      Policies:
        - PolicyName: "EC2S3ReadOnlyPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource: "*"

  # IAM Users
  User1:
    Type: "AWS::IAM::User"
    Properties:
      UserName: "User1"
      Groups:
        - !Ref S3ReadOnlyGroup
      LoginProfile:
        Password: !Join
          - ""
          - - "{{resolve:secretsmanager:"
            - !Ref User1Password
            - ":SecretString:password}}"
        PasswordResetRequired: true

  User2:
    Type: "AWS::IAM::User"
    Properties:
      UserName: "User2"
      Groups:
        - !Ref EC2S3ReadOnlyGroup
      LoginProfile:
        Password: !Join
          - ""
          - - "{{resolve:secretsmanager:"
            - !Ref User2Password
            - ":SecretString:password}}"
        PasswordResetRequired: true

  User3:
    Type: "AWS::IAM::User"
    Properties:
      UserName: "User3"
      Groups:
        - !Ref S3ReadOnlyGroup
      LoginProfile:
        Password: !Join
          - ""
          - - "{{resolve:secretsmanager:"
            - !Ref User3Password
            - ":SecretString:password}}"
        PasswordResetRequired: true

  # Lambda Function to handle EventBridge events
  UserNotificationLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: "python3.9"
      Code:
        ZipFile: |
          import boto3
          import os

          def handler(event, context):
              ssm = boto3.client('ssm')
              secretsmanager = boto3.client('secretsmanager')

              # Retrieve emails and passwords from Parameter Store and Secrets Manager
              user1_email = ssm.get_parameter(Name='/user1/email')['Parameter']['Value']
              user2_email = ssm.get_parameter(Name='/user2/email')['Parameter']['Value']
              user3_email = ssm.get_parameter(Name='/user3/email')['Parameter']['Value']

              user1_password = secretsmanager.get_secret_value(SecretId='User1Password')['SecretString']
              user2_password = secretsmanager.get_secret_value(SecretId='User2Password')['SecretString']
              user3_password = secretsmanager.get_secret_value(SecretId='User3Password')['SecretString']

              # Parse the passwords from the secret
              user1_password = eval(user1_password)['password']
              user2_password = eval(user2_password)['password']
              user3_password = eval(user3_password)['password']

              # Print out user credentials
              print(f'User1: Email={user1_email}, Password={user1_password}')
              print(f'User2: Email={user2_email}, Password={user2_password}')
              print(f'User3: Email={user3_email}, Password={user3_password}')
              
              return "User credentials printed"

  # IAM Role for Lambda Execution
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "LambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameter"
                  - "secretsmanager:GetSecretValue"
                  - "logs:CreateLogGroup"      # Allow creating log groups
                  - "logs:CreateLogStream"     # Allow creating log streams
                  - "logs:PutLogEvents"        # Allow putting log events
                Resource: "*"

  # EventBridge Rule to trigger Lambda on user creation
  UserCreationRule:
    Type: "AWS::Events::Rule"
    Properties:
      EventPattern:
        source:
          - "aws.iam"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventName:
            - "CreateUser"
      Targets:
        - Arn: !GetAtt UserNotificationLambda.Arn
          Id: "UserNotificationLambdaTarget"

  # Permission for EventBridge to invoke Lambda
  LambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref UserNotificationLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
